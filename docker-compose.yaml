version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: storywarz-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-storywarz}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-storywarz_password}
      POSTGRES_DB: ${POSTGRES_DB:-storywarz}
      PGDATA: /data/postgres
    volumes:
      - postgres-data:/data/postgres
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - storywarz-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U storywarz"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: storywarz-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-storywarz_password}
    volumes:
      - redis-data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - storywarz-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  user-service:
    build: 
      context: ./services/user-service
    container_name: storywarz-user-service
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-storywarz}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-storywarz_password}
      POSTGRES_DB: ${POSTGRES_DB:-storywarz}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-storywarz_password}
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_key}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "50051:50051"
    networks:
      - storywarz-network
    restart: unless-stopped

  graphql-gateway:
    build:
      context: ./graphql-gateway
    container_name: storywarz-graphql-gateway
    environment:
      USER_SERVICE_HOST: user-service
      USER_SERVICE_PORT: 50051
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-storywarz_password}
      PORT: 8080
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_key}
    depends_on:
      - user-service
    ports:
      - "8080:8080"
    networks:
      - storywarz-network
    restart: unless-stopped

volumes:
  postgres-data:
  redis-data:

networks:
  storywarz-network:
    driver: bridge 